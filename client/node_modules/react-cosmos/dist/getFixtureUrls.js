"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFixtureUrls = getFixtureUrls;

var _react = require("react-cosmos-shared2/react");

var _url = require("react-cosmos-shared2/url");

var _playgroundHtml = require("./shared/playgroundHtml");

var _userDeps = require("./shared/userDeps");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getFixtureUrls(_x) {
  return _getFixtureUrls.apply(this, arguments);
}

function _getFixtureUrls() {
  _getFixtureUrls = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var cosmosConfig, _ref$fullScreen, fullScreen, host, fixtureUrls, pushFixtureUrl, _ref3, fixtureExportsByPath, fixtureNamesByPath;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pushFixtureUrl = function _ref4(fixtureId) {
              fixtureUrls.push(createFixtureUrl(host, fixtureId, fullScreen));
            };

            cosmosConfig = _ref.cosmosConfig, _ref$fullScreen = _ref.fullScreen, fullScreen = _ref$fullScreen === void 0 ? false : _ref$fullScreen;
            host = getPlaygroundHost(cosmosConfig);
            fixtureUrls = [];
            _context.next = 6;
            return (0, _userDeps.getUserModules)(cosmosConfig);

          case 6:
            _ref3 = _context.sent;
            fixtureExportsByPath = _ref3.fixtureExportsByPath;
            fixtureNamesByPath = (0, _react.getFixtureNamesByPath)(fixtureExportsByPath);
            Object.keys(fixtureNamesByPath).forEach(function (fixturePath) {
              var fixtureNames = fixtureNamesByPath[fixturePath];

              if (fixtureNames === null) {
                pushFixtureUrl({
                  path: fixturePath,
                  name: null
                });
              } else {
                fixtureNames.forEach(function (fixtureName) {
                  pushFixtureUrl({
                    path: fixturePath,
                    name: fixtureName
                  });
                });
              }
            });
            return _context.abrupt("return", fixtureUrls);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getFixtureUrls.apply(this, arguments);
}

function createFixtureUrl(host, fixtureId, fullScreen) {
  if (fullScreen) {
    var _query = (0, _url.stringifyRendererUrlQuery)({
      _fixtureId: fixtureId
    });

    return "".concat(host, "/").concat(_playgroundHtml.RENDERER_FILENAME, "?").concat(_query);
  }

  var query = (0, _url.stringifyPlaygroundUrlQuery)({
    fixtureId: fixtureId
  });
  return "".concat(host, "/?").concat(query);
}

function getPlaygroundHost(_ref2) {
  var hostname = _ref2.hostname,
      port = _ref2.port;
  return "".concat(hostname || 'localhost', ":").concat(port);
}