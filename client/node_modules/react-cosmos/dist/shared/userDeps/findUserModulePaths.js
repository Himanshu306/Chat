"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findUserModulePaths = findUserModulePaths;

var _glob = _interopRequireDefault(require("glob"));

var _micromatch = _interopRequireDefault(require("micromatch"));

var _util = _interopRequireDefault(require("util.promisify"));

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var globAsync = (0, _util.default)(_glob.default);

function findUserModulePaths(_x) {
  return _findUserModulePaths.apply(this, arguments);
}

function _findUserModulePaths() {
  _findUserModulePaths = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var rootDir, fixturesDir, fixtureFileSuffix, paths, fixturePatterns, fixturePaths, decoratorPaths;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            rootDir = _ref.rootDir, fixturesDir = _ref.fixturesDir, fixtureFileSuffix = _ref.fixtureFileSuffix;
            _context.next = 3;
            return globAsync('**/*', {
              cwd: rootDir,
              absolute: true,
              ignore: (0, _shared.getIgnorePatterns)()
            });

          case 3:
            paths = _context.sent;
            fixturePatterns = (0, _shared.getFixturePatterns)(fixturesDir, fixtureFileSuffix);
            fixturePaths = getMatchingPaths(paths, fixturePatterns);
            decoratorPaths = getMatchingPaths(paths, (0, _shared.getDecoratorPatterns)()); // IDEA: Omit fixture paths that are also decorator paths. Relevant only if
            // it becomes useful to put decorator files inside fixture dirs.

            return _context.abrupt("return", {
              fixturePaths: fixturePaths,
              decoratorPaths: decoratorPaths
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _findUserModulePaths.apply(this, arguments);
}

function getMatchingPaths(paths, patterns) {
  return (0, _micromatch.default)(paths, patterns, {
    dot: true
  });
}