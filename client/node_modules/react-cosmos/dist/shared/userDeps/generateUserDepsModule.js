"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateUserDepsModule = generateUserDepsModule;

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _findUserModulePaths = require("./findUserModulePaths");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Warning: Renderer config must be serializable!
function generateUserDepsModule(_x, _x2) {
  return _generateUserDepsModule.apply(this, arguments);
}

function _generateUserDepsModule() {
  _generateUserDepsModule = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(cosmosConfig, rendererConfig) {
    var rootDir, fixturesDir, fixtureFileSuffix, globalImports, _ref2, fixturePaths, decoratorPaths;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            rootDir = cosmosConfig.rootDir, fixturesDir = cosmosConfig.fixturesDir, fixtureFileSuffix = cosmosConfig.fixtureFileSuffix, globalImports = cosmosConfig.globalImports;
            _context.next = 3;
            return (0, _findUserModulePaths.findUserModulePaths)({
              rootDir: rootDir,
              fixturesDir: fixturesDir,
              fixtureFileSuffix: fixtureFileSuffix
            });

          case 3:
            _ref2 = _context.sent;
            fixturePaths = _ref2.fixturePaths;
            decoratorPaths = _ref2.decoratorPaths;
            return _context.abrupt("return", getCompiledTemplate({
              globalImports: genGlobalRequires(globalImports),
              rendererConfig: stringifyRendererConfig(rendererConfig),
              fixtures: genRequireMap(fixturePaths, rootDir),
              decorators: genRequireMap(decoratorPaths, rootDir)
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateUserDepsModule.apply(this, arguments);
}

function genGlobalRequires(paths) {
  if (paths.length === 0) {
    return '';
  } // Forward slashes are necessary via slash() to avoid double-escaping
  // backslashes on Windows


  return ['', '// Keeping global imports here is superior to making them bundle entry points', '// because this way they become hot-reloadable'].concat(_toConsumableArray(paths.map(function (importPath) {
    return "require('".concat((0, _slash.default)(importPath), "');");
  })), ['']).join("\n");
}

function genRequireMap(paths, rootDir) {
  if (paths.length === 0) {
    return '{}';
  }

  var requireRows = paths.map(function (p) {
    var relPath = (0, _slash.default)(_path.default.relative(rootDir, p));
    return "\n  '".concat(relPath, "': require('").concat(p, "').default");
  });
  return "{".concat(requireRows.join(', '), "\n}");
}

function stringifyRendererConfig(rendererConfig) {
  return JSON.stringify(rendererConfig, null, 2);
}

function getCompiledTemplate(_ref) {
  var globalImports = _ref.globalImports,
      rendererConfig = _ref.rendererConfig,
      fixtures = _ref.fixtures,
      decorators = _ref.decorators;
  return "// This file is automatically generated by Cosmos\n".concat(globalImports, "\nexport const rendererConfig = ").concat(rendererConfig, ";\nexport const fixtures = ").concat(fixtures, ";\nexport const decorators = ").concat(decorators, ";\n");
}