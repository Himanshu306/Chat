"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserModules = getUserModules;

var _path = _interopRequireDefault(require("path"));

var _ = require(".");

var _slash = _interopRequireDefault(require("slash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getUserModules(_x) {
  return _getUserModules.apply(this, arguments);
}

function _getUserModules() {
  _getUserModules = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var rootDir, fixturesDir, fixtureFileSuffix, _ref2, fixturePaths, decoratorPaths;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            rootDir = _ref.rootDir, fixturesDir = _ref.fixturesDir, fixtureFileSuffix = _ref.fixtureFileSuffix;
            _context.next = 3;
            return (0, _.findUserModulePaths)({
              rootDir: rootDir,
              fixturesDir: fixturesDir,
              fixtureFileSuffix: fixtureFileSuffix
            });

          case 3:
            _ref2 = _context.sent;
            fixturePaths = _ref2.fixturePaths;
            decoratorPaths = _ref2.decoratorPaths;
            return _context.abrupt("return", {
              fixtureExportsByPath: getDefaultExportsByPath(fixturePaths, rootDir),
              decoratorsByPath: getDefaultExportsByPath(decoratorPaths, rootDir)
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getUserModules.apply(this, arguments);
}

function getDefaultExportsByPath(paths, rootDir) {
  var exportsByPath = {};
  paths.forEach(function (p) {
    // Converting to forward slashes on Windows is important because the
    // slashes are used for generating a sorted list of fixtures and
    // decorators.
    var relPath = (0, _slash.default)(_path.default.relative(rootDir, p));
    exportsByPath[relPath] = require(p).default;
  });
  return exportsByPath;
}