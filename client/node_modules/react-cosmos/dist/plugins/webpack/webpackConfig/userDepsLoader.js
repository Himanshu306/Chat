"use strict";

var _config = require("../../../config");

var _userDeps = require("../../../shared/userDeps");

var _dom = require("../cosmosConfig/dom");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports =
/*#__PURE__*/
function () {
  var _injectUserDeps = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(source) {
    var cosmosConfig, webpackLoaderContext, callback, watchDirs, _createDomCosmosConfi, containerQuerySelector, rendererConfig, userDepsModule;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cosmosConfig = (0, _config.detectCosmosConfig)();
            webpackLoaderContext = this;
            callback = webpackLoaderContext.async(); // This ensures this loader is invalidated whenever a new file is added to or
            // removed from user's project, which in turn triggers react-cosmos-voyager2
            // to detect fixture files and finally update fixture list inside Playground.
            // Note that while this may not be very performant, it's not the equivalent
            // of require.context, which not only watches for file changes but also
            // automatically bundles new files that match the watcher's query.
            // https://github.com/webpack/webpack/issues/222#issuecomment-40691546

            watchDirs = cosmosConfig.watchDirs;
            watchDirs.forEach(function (watchDir) {
              return webpackLoaderContext.addContextDependency(watchDir);
            });
            _createDomCosmosConfi = (0, _dom.createDomCosmosConfig)(cosmosConfig), containerQuerySelector = _createDomCosmosConfi.containerQuerySelector;
            rendererConfig = {
              containerQuerySelector: containerQuerySelector
            };
            _context.next = 9;
            return (0, _userDeps.generateUserDepsModule)(cosmosConfig, rendererConfig);

          case 9:
            userDepsModule = _context.sent;
            callback(null, userDepsModule);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function injectUserDeps(_x) {
    return _injectUserDeps.apply(this, arguments);
  }

  return injectUserDeps;
}();